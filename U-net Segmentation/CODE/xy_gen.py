# -*- coding: utf-8 -*-
"""unet_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uc0obFicJRgnn5jGvvu4Mq361goDKjQ6
"""



import os
# for reading and processing images
import imageio
from PIL import Image
#import tifffile
# for visualizations
import matplotlib.pyplot as plt
import numpy as np # for using np arrays
from numpy import asarray
import cv2

import os
base_path = './'
path_img =base_path+'/DataOUT'
path_mask = base_path+'/MaskOUT'
path_valids =base_path+'/ImagenesValidas'

img_files = os.listdir(path_img) 
#img_files.sort()

mask_files =os.listdir(path_mask) 
#mask_files.sort()

valid_files =os.listdir(path_valids) 
#valid_files.sort()

index = 0
for i in valid_files:
  valid_files[index]=i.replace('_summ.jpg','')
  index+=1



"""Visualize/explore the dataset of images and masks"""

def show_image_mask(img_view,mask_view):
  fig, arr = plt.subplots(1, 2, figsize=(5, 5))
  arr[0].imshow(img_view)
  arr[0].set_title('Image ' )
  arr[1].imshow(mask_view)
  arr[1].set_title('Masked Image ')

img_view  = imageio.imread(os.path.join(path_img, img_files[1]) )
os.path.join(path_img, img_files[1])
mask_view  = imageio.imread(os.path.join(path_mask, mask_files[1]) )
show_image_mask(img_view,mask_view)

"""Scale image from 0-255 to the rage 0-1 and then crop the extra empty pixels of the image"""

def scale_crop(img,scale):
  #normalize values in the range 0-1
  crop_img = img[0:scale, 0:880]
  return crop_img

"""GENERATE THE DATASET"""

def PreprocessData(img, mask, img_size,path_img, path_mask):
  """
    Processes the images and mask present in the shared list and path
    Returns a NumPy dataset with images as 3-D arrays of desired size
    Please note the masks in this dataset have only one channel
    """


  # Pull the relevant dimensions for image and mask
  m = len(img)                     # number of images
  i_h,i_w = img_size   # pull height, width, and channels of image
  m_h,m_w = img_size # pull height, width, and channels of mask
  i_c = 1
  m_c = 1
  
  # Remove 0.5 size from bottom:
  #0.8 is 1600 pixels (the height)
  i_h_scale = round(0.5*i_h/0.8)
  

    
    # Define X and Y as number of images along with shape of one image
  X = np.zeros((m,i_h_scale,i_w), dtype=np.float32)
  y = np.zeros((m,i_h_scale,m_w), dtype=np.float32)
  
   
    # Resize images and masks
  for file in img:
    index = img.index(file)
    file_ok=file+'_clean.jpg'

    path = os.path.join(path_img, file_ok)
    single_img = cv2.imread(path,cv2.IMREAD_GRAYSCALE)

    single_img_scale = scale_crop(single_img,scale)
    
    X[index] = single_img_scale

  for file in mask:
    index = mask.index(file)
    file_ok=file+'_mask.jpg'

    path = os.path.join(path_mask, file_ok)
    single_mask = cv2.imread(path,cv2.IMREAD_GRAYSCALE)
    

    single_mask_scale = scale_crop(single_mask,scale)
    y[index] = single_mask_scale
     
  return X,y

# Remove 0.5 size from bottom:
#0.8 is 1600 pixels (the height)
scale = round(0.5*1600/0.8)

#assume all images are the same size
img_size = (1600, 880)

X,y = PreprocessData(valid_files,valid_files,img_size,path_img,path_mask)

np.save("X.npy", X)
np.save("Y.npy", y)

print(len(valid_files))

print(X.shape)